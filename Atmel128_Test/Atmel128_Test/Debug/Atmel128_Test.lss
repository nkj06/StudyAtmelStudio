
Atmel128_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c0  00800100  000004f2  00000586  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  008001c0  008001c0  00000646  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000646  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000678  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000006b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000dd4  00000000  00000000  000006f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008f0  00000000  00000000  000014cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005cb  00000000  00000000  00001dbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d0  00000000  00000000  00002388  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000479  00000000  00000000  00002458  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000609  00000000  00000000  000028d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00002eda  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	ed c1       	rjmp	.+986    	; 0x3e0 <__vector_1>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 ef       	ldi	r30, 0xF2	; 242
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 3c       	cpi	r26, 0xC0	; 192
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 ec       	ldi	r26, 0xC0	; 192
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a1 3c       	cpi	r26, 0xC1	; 193
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	1e d0       	rcall	.+60     	; 0x100 <main>
  c4:	14 c2       	rjmp	.+1064   	; 0x4ee <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <putch>:

unsigned int DoReMi[8] = {523, 587, 659, 698, 783, 880, 987, 1046}; // 부저

void putch(unsigned char data)
{
	while((UCSR0A & 0x20) == 0); // 전송준비가 될때까지 대기
  c8:	5d 9b       	sbis	0x0b, 5	; 11
  ca:	fe cf       	rjmp	.-4      	; 0xc8 <putch>
	UDR0 = data; // 데이터를 UDR0에 쓰면 전송된다
  cc:	8c b9       	out	0x0c, r24	; 12
	UCSR0A |= 0x20;
  ce:	5d 9a       	sbi	0x0b, 5	; 11
  d0:	08 95       	ret

000000d2 <getch>:
}

unsigned char getch(void)
{
	unsigned char data;
	while((UCSR0A & 0x80)==0); // 데이터를 받을때까지 대기
  d2:	5f 9b       	sbis	0x0b, 7	; 11
  d4:	fe cf       	rjmp	.-4      	; 0xd2 <getch>
	data = UDR0; // 수신된 데이터는 UDR0에 저장
  d6:	8c b1       	in	r24, 0x0c	; 12
	UCSR0A |= 0x80;
  d8:	5f 9a       	sbi	0x0b, 7	; 11
	return data; // 읽어온 문자를 반환
}
  da:	08 95       	ret

000000dc <putch_Str>:

void putch_Str(char *str) // CDS값 출력할 거
{
  dc:	0f 93       	push	r16
  de:	1f 93       	push	r17
  e0:	cf 93       	push	r28
  e2:	8c 01       	movw	r16, r24
	unsigned char i = 0;
  e4:	c0 e0       	ldi	r28, 0x00	; 0
	while(str[i]!='\0')
  e6:	f8 01       	movw	r30, r16
  e8:	ec 0f       	add	r30, r28
  ea:	f1 1d       	adc	r31, r1
  ec:	80 81       	ld	r24, Z
  ee:	88 23       	and	r24, r24
  f0:	19 f0       	breq	.+6      	; 0xf8 <putch_Str+0x1c>
	putch(str[i++]); // 문자열을 출력
  f2:	cf 5f       	subi	r28, 0xFF	; 255
  f4:	e9 df       	rcall	.-46     	; 0xc8 <putch>
  f6:	f7 cf       	rjmp	.-18     	; 0xe6 <putch_Str+0xa>
}
  f8:	cf 91       	pop	r28
  fa:	1f 91       	pop	r17
  fc:	0f 91       	pop	r16
  fe:	08 95       	ret

00000100 <main>:

int main(void)
{
 100:	cf 93       	push	r28
 102:	df 93       	push	r29
 104:	cd b7       	in	r28, 0x3d	; 61
 106:	de b7       	in	r29, 0x3e	; 62
 108:	c0 58       	subi	r28, 0x80	; 128
 10a:	d1 09       	sbc	r29, r1
 10c:	0f b6       	in	r0, 0x3f	; 63
 10e:	f8 94       	cli
 110:	de bf       	out	0x3e, r29	; 62
 112:	0f be       	out	0x3f, r0	; 63
 114:	cd bf       	out	0x3d, r28	; 61
	unsigned char text[] = "\r\n +++ MENU +++ \r\n L : LED \r\n C : CDS \r\n 0 ~ 7 : PIANO \r\n [Step Motor] r : right, l : left \r\n push button 0 : stop \r\n ";
 116:	87 e7       	ldi	r24, 0x77	; 119
 118:	e7 e3       	ldi	r30, 0x37	; 55
 11a:	f1 e0       	ldi	r31, 0x01	; 1
 11c:	de 01       	movw	r26, r28
 11e:	11 96       	adiw	r26, 0x01	; 1
 120:	01 90       	ld	r0, Z+
 122:	0d 92       	st	X+, r0
 124:	8a 95       	dec	r24
 126:	e1 f7       	brne	.-8      	; 0x120 <main+0x20>
	unsigned char echo[] = "ECHO >> ";
 128:	89 e0       	ldi	r24, 0x09	; 9
 12a:	ee ea       	ldi	r30, 0xAE	; 174
 12c:	f1 e0       	ldi	r31, 0x01	; 1
 12e:	de 01       	movw	r26, r28
 130:	a8 58       	subi	r26, 0x88	; 136
 132:	bf 4f       	sbci	r27, 0xFF	; 255
 134:	01 90       	ld	r0, Z+
 136:	0d 92       	st	X+, r0
 138:	8a 95       	dec	r24
 13a:	e1 f7       	brne	.-8      	; 0x134 <main+0x34>
	
	unsigned char LED_Data = 0x01, l; // LED
	
	unsigned int AdData = 0; // CDS

	DDRC = 0xFF; // LED
 13c:	8f ef       	ldi	r24, 0xFF	; 255
 13e:	84 bb       	out	0x14, r24	; 20
	
	DDRE = 0xfe; // UART	
 140:	8e ef       	ldi	r24, 0xFE	; 254
 142:	82 b9       	out	0x02, r24	; 2
	UCSR0A = 0x00;
 144:	1b b8       	out	0x0b, r1	; 11
	UCSR0B = 0x18;
 146:	88 e1       	ldi	r24, 0x18	; 24
 148:	8a b9       	out	0x0a, r24	; 10
	UCSR0C = 0x06;
 14a:	86 e0       	ldi	r24, 0x06	; 6
 14c:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
	UBRR0H = 0x00;
 150:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = 0x03;
 154:	83 e0       	ldi	r24, 0x03	; 3
 156:	89 b9       	out	0x09, r24	; 9
	
	DDRB = 0x80; // Buzzer를 PB7에 연결
 158:	90 e8       	ldi	r25, 0x80	; 128
 15a:	97 bb       	out	0x17, r25	; 23
	TCCR1A = 0x00;
 15c:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0x19;
 15e:	99 e1       	ldi	r25, 0x19	; 25
 160:	9e bd       	out	0x2e, r25	; 46
	TCCR1C = 0x00;
 162:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	TCNT1 = 0x0000; // 타이머3 카운터 초기화
 166:	1d bc       	out	0x2d, r1	; 45
 168:	1c bc       	out	0x2c, r1	; 44
	
	DDRF = 0x02; // 광센서
 16a:	92 e0       	ldi	r25, 0x02	; 2
 16c:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	PORTF = 0x02;
 170:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
	ADMUX = 0x00; // ADC0 선택
 174:	17 b8       	out	0x07, r1	; 7
	ADCSRA = 0x86; // ADC 허가, 128분주
 176:	96 e8       	ldi	r25, 0x86	; 134
 178:	96 b9       	out	0x06, r25	; 6
	
	DDRA = 0x20; // 스텝 모터
 17a:	90 e2       	ldi	r25, 0x20	; 32
 17c:	9a bb       	out	0x1a, r25	; 26
	DDRD = 0xF0; 
 17e:	90 ef       	ldi	r25, 0xF0	; 240
 180:	91 bb       	out	0x11, r25	; 17
	PORTA &= ~0x20;
 182:	dd 98       	cbi	0x1b, 5	; 27

	// 스위치 인터럽트
	EICRA = 0x03;
 184:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
	EIMSK = 0x01;
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	89 bf       	out	0x39, r24	; 57
	EIFR = 0x01;
 18c:	88 bf       	out	0x38, r24	; 56
	sei();
 18e:	78 94       	sei
int main(void)
{
	unsigned char text[] = "\r\n +++ MENU +++ \r\n L : LED \r\n C : CDS \r\n 0 ~ 7 : PIANO \r\n [Step Motor] r : right, l : left \r\n push button 0 : stop \r\n ";
	unsigned char echo[] = "ECHO >> ";
	
	unsigned char i = 0, s = 0;
 190:	10 e0       	ldi	r17, 0x00	; 0
	EICRA = 0x03;
	EIMSK = 0x01;
	EIFR = 0x01;
	sei();

	while(text[i]!='\0'){ // 문자열 데이터가 '\0'인 경우, 문자열 끝임
 192:	e1 e0       	ldi	r30, 0x01	; 1
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	ec 0f       	add	r30, r28
 198:	fd 1f       	adc	r31, r29
 19a:	e1 0f       	add	r30, r17
 19c:	f1 1d       	adc	r31, r1
 19e:	80 81       	ld	r24, Z
 1a0:	88 23       	and	r24, r24
 1a2:	19 f0       	breq	.+6      	; 0x1aa <main+0xaa>
		putch(text[i++]); // 저장된 text 문자열 출력
 1a4:	1f 5f       	subi	r17, 0xFF	; 255
 1a6:	90 df       	rcall	.-224    	; 0xc8 <putch>
 1a8:	f4 cf       	rjmp	.-24     	; 0x192 <main+0x92>
 1aa:	10 e0       	ldi	r17, 0x00	; 0
	}
	i = 0; // 카운터변수 초기화
	while(echo[i]!='\0'){ // 문자열 데이터가 '\0'인 경우, 문자열 끝임
 1ac:	e8 e7       	ldi	r30, 0x78	; 120
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	ec 0f       	add	r30, r28
 1b2:	fd 1f       	adc	r31, r29
 1b4:	e1 0f       	add	r30, r17
 1b6:	f1 1d       	adc	r31, r1
 1b8:	80 81       	ld	r24, Z
 1ba:	88 23       	and	r24, r24
 1bc:	19 f0       	breq	.+6      	; 0x1c4 <main+0xc4>
		putch(echo[i++]); // 저장된 echo 문자열을 출력
 1be:	1f 5f       	subi	r17, 0xFF	; 255
 1c0:	83 df       	rcall	.-250    	; 0xc8 <putch>
 1c2:	f4 cf       	rjmp	.-24     	; 0x1ac <main+0xac>
				if(Time_STOP == 1)
				{
					Time_STOP = 0;
					break;
				}
				PORTD = 0x10;
 1c4:	90 e1       	ldi	r25, 0x10	; 16
 1c6:	c9 2e       	mov	r12, r25
				_delay_ms(10);
				PORTD = 0x20;
 1c8:	20 e2       	ldi	r18, 0x20	; 32
 1ca:	d2 2e       	mov	r13, r18
				ADCSRA |= 0x40;
				while((ADCSRA & 0x10) == 0x00);
				AdData = ADC;
		//		sprintf(s," Cds: %d", AdData);
				putch_Str("\n\r CDS : ");
				putch((AdData/1000)%10 + '0');
 1cc:	38 ee       	ldi	r19, 0xE8	; 232
 1ce:	a3 2e       	mov	r10, r19
 1d0:	33 e0       	ldi	r19, 0x03	; 3
 1d2:	b3 2e       	mov	r11, r19
 1d4:	0a e0       	ldi	r16, 0x0A	; 10
 1d6:	10 e0       	ldi	r17, 0x00	; 0
				putch((AdData/100)%10 + '0');
 1d8:	44 e6       	ldi	r20, 0x64	; 100
 1da:	84 2e       	mov	r8, r20
 1dc:	91 2c       	mov	r9, r1

		if((RX_data >= 0x30) && (RX_data <= 0x37)) // 피아노 0 ~ 7
		{
			putch_Str(" piano \n\r");
			TCCR1A |= 0x0A;
			ICR1 = 7372800/DoReMi[RX_data - 0x30];
 1de:	41 2c       	mov	r4, r1
 1e0:	50 e8       	ldi	r21, 0x80	; 128
 1e2:	55 2e       	mov	r5, r21
 1e4:	50 e7       	ldi	r21, 0x70	; 112
 1e6:	65 2e       	mov	r6, r21
	i = 0; // 카운터변수 초기화
	while(echo[i]!='\0'){ // 문자열 데이터가 '\0'인 경우, 문자열 끝임
		putch(echo[i++]); // 저장된 echo 문자열을 출력
	}
	while(1){
		RX_data = getch(); // PC로부터 입력 받은 데이터를 변수 RX_data에 저장
 1e8:	71 2c       	mov	r7, r1
 1ea:	73 df       	rcall	.-282    	; 0xd2 <getch>
		putch(RX_data);
 1ec:	f8 2e       	mov	r15, r24
 1ee:	6c df       	rcall	.-296    	; 0xc8 <putch>

		if((RX_data >= 0x30) && (RX_data <= 0x37)) // 피아노 0 ~ 7
 1f0:	80 ed       	ldi	r24, 0xD0	; 208
 1f2:	8f 0d       	add	r24, r15
 1f4:	88 30       	cpi	r24, 0x08	; 8
		{
			putch_Str(" piano \n\r");
 1f6:	90 f5       	brcc	.+100    	; 0x25c <main+0x15c>
 1f8:	80 e1       	ldi	r24, 0x10	; 16
 1fa:	91 e0       	ldi	r25, 0x01	; 1
 1fc:	6f df       	rcall	.-290    	; 0xdc <putch_Str>
			TCCR1A |= 0x0A;
 1fe:	8f b5       	in	r24, 0x2f	; 47
 200:	8a 60       	ori	r24, 0x0A	; 10
 202:	8f bd       	out	0x2f, r24	; 47
			ICR1 = 7372800/DoReMi[RX_data - 0x30];
 204:	ef 2d       	mov	r30, r15
 206:	f0 e0       	ldi	r31, 0x00	; 0
 208:	ee 0f       	add	r30, r30
 20a:	ff 1f       	adc	r31, r31
 20c:	e0 56       	subi	r30, 0x60	; 96
 20e:	ff 4f       	sbci	r31, 0xFF	; 255
 210:	20 81       	ld	r18, Z
 212:	31 81       	ldd	r19, Z+1	; 0x01
 214:	40 e0       	ldi	r20, 0x00	; 0
 216:	50 e0       	ldi	r21, 0x00	; 0
 218:	c3 01       	movw	r24, r6
 21a:	b2 01       	movw	r22, r4
 21c:	2a d1       	rcall	.+596    	; 0x472 <__divmodsi4>
 21e:	37 bd       	out	0x27, r19	; 39
			OCR1C = ICR1/10;
 220:	26 bd       	out	0x26, r18	; 38
 222:	86 b5       	in	r24, 0x26	; 38
 224:	97 b5       	in	r25, 0x27	; 39
 226:	b8 01       	movw	r22, r16
 228:	10 d1       	rcall	.+544    	; 0x44a <__udivmodhi4>
 22a:	70 93 79 00 	sts	0x0079, r23	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 22e:	60 93 78 00 	sts	0x0078, r22	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 232:	2f ef       	ldi	r18, 0xFF	; 255
 234:	3f e3       	ldi	r19, 0x3F	; 63
 236:	4b e0       	ldi	r20, 0x0B	; 11
 238:	21 50       	subi	r18, 0x01	; 1
 23a:	30 40       	sbci	r19, 0x00	; 0
 23c:	40 40       	sbci	r20, 0x00	; 0
 23e:	e1 f7       	brne	.-8      	; 0x238 <main+0x138>
 240:	00 c0       	rjmp	.+0      	; 0x242 <main+0x142>
			_delay_ms(500);
			TCCR1A = 0x00; // 부저소리 끔
 242:	00 00       	nop
			ICR1 = 10;
 244:	1f bc       	out	0x2f, r1	; 47
 246:	17 bd       	out	0x27, r17	; 39
			OCR1C = ICR1/10;
 248:	06 bd       	out	0x26, r16	; 38
 24a:	86 b5       	in	r24, 0x26	; 38
 24c:	97 b5       	in	r25, 0x27	; 39
 24e:	b8 01       	movw	r22, r16
 250:	fc d0       	rcall	.+504    	; 0x44a <__udivmodhi4>
 252:	70 93 79 00 	sts	0x0079, r23	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 256:	60 93 78 00 	sts	0x0078, r22	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 25a:	c7 cf       	rjmp	.-114    	; 0x1ea <main+0xea>
		}
		else if (RX_data == 'L') // LED
 25c:	5c e4       	ldi	r21, 0x4C	; 76
 25e:	f5 12       	cpse	r15, r21
 260:	32 c0       	rjmp	.+100    	; 0x2c6 <main+0x1c6>
 262:	80 e0       	ldi	r24, 0x00	; 0
		{
			while(1)
			{
				if(s == 1)
 264:	81 30       	cpi	r24, 0x01	; 1
 266:	09 f4       	brne	.+2      	; 0x26a <main+0x16a>
 268:	c0 cf       	rjmp	.-128    	; 0x1ea <main+0xea>
 26a:	98 e0       	ldi	r25, 0x08	; 8
 26c:	21 e0       	ldi	r18, 0x01	; 1
					s = 0;
					break;
				}
				LED_Data = 0x01;
				for(l = 0; l<8; l++){
					if(Time_STOP == 1)
 26e:	30 91 c0 01 	lds	r19, 0x01C0	; 0x8001c0 <__data_end>
 272:	31 30       	cpi	r19, 0x01	; 1
 274:	71 f0       	breq	.+28     	; 0x292 <main+0x192>
					{
						s = 1;
						break;
					}
					PORTC = LED_Data;
 276:	25 bb       	out	0x15, r18	; 21
					LED_Data <<= 1;
 278:	22 0f       	add	r18, r18
 27a:	ef ef       	ldi	r30, 0xFF	; 255
 27c:	ff e3       	ldi	r31, 0x3F	; 63
 27e:	3b e0       	ldi	r19, 0x0B	; 11
 280:	e1 50       	subi	r30, 0x01	; 1
 282:	f0 40       	sbci	r31, 0x00	; 0
 284:	30 40       	sbci	r19, 0x00	; 0
 286:	e1 f7       	brne	.-8      	; 0x280 <main+0x180>
 288:	00 c0       	rjmp	.+0      	; 0x28a <main+0x18a>
 28a:	00 00       	nop
 28c:	91 50       	subi	r25, 0x01	; 1
				{
					s = 0;
					break;
				}
				LED_Data = 0x01;
				for(l = 0; l<8; l++){
 28e:	79 f7       	brne	.-34     	; 0x26e <main+0x16e>
 290:	01 c0       	rjmp	.+2      	; 0x294 <main+0x194>
					if(Time_STOP == 1)
					{
						s = 1;
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	97 e0       	ldi	r25, 0x07	; 7
					}
					PORTC = LED_Data;
					LED_Data <<= 1;
					_delay_ms(500);
				}
				LED_Data = 0x40;
 296:	20 e4       	ldi	r18, 0x40	; 64
				for(l=1; l<8; l++){
					if(Time_STOP == 1)
 298:	30 91 c0 01 	lds	r19, 0x01C0	; 0x8001c0 <__data_end>
 29c:	31 30       	cpi	r19, 0x01	; 1
 29e:	29 f4       	brne	.+10     	; 0x2aa <main+0x1aa>
					{
						s = 1;
						Time_STOP = 0;
 2a0:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <__data_end>
						PORTC = 0x00;
 2a4:	15 ba       	out	0x15, r1	; 21
				}
				LED_Data = 0x40;
				for(l=1; l<8; l++){
					if(Time_STOP == 1)
					{
						s = 1;
 2a6:	81 e0       	ldi	r24, 0x01	; 1
						Time_STOP = 0;
						PORTC = 0x00;
						break;
 2a8:	dd cf       	rjmp	.-70     	; 0x264 <main+0x164>
					}
					PORTC = LED_Data;
 2aa:	25 bb       	out	0x15, r18	; 21
					LED_Data >>= 1;
 2ac:	26 95       	lsr	r18
 2ae:	4f ef       	ldi	r20, 0xFF	; 255
 2b0:	5f e3       	ldi	r21, 0x3F	; 63
 2b2:	eb e0       	ldi	r30, 0x0B	; 11
 2b4:	41 50       	subi	r20, 0x01	; 1
 2b6:	50 40       	sbci	r21, 0x00	; 0
 2b8:	e0 40       	sbci	r30, 0x00	; 0
 2ba:	e1 f7       	brne	.-8      	; 0x2b4 <main+0x1b4>
 2bc:	00 c0       	rjmp	.+0      	; 0x2be <main+0x1be>
 2be:	00 00       	nop
 2c0:	91 50       	subi	r25, 0x01	; 1
					PORTC = LED_Data;
					LED_Data <<= 1;
					_delay_ms(500);
				}
				LED_Data = 0x40;
				for(l=1; l<8; l++){
 2c2:	51 f7       	brne	.-44     	; 0x298 <main+0x198>
 2c4:	cf cf       	rjmp	.-98     	; 0x264 <main+0x164>
					LED_Data >>= 1;
					_delay_ms(500);
				}
			}
		}
		else if (RX_data == 'C') // CDS
 2c6:	f3 e4       	ldi	r31, 0x43	; 67
 2c8:	ff 12       	cpse	r15, r31
 2ca:	33 c0       	rjmp	.+102    	; 0x332 <main+0x232>
		{
			while(1)
			{
				if(Time_STOP == 1)
 2cc:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <__data_end>
 2d0:	81 30       	cpi	r24, 0x01	; 1
 2d2:	09 f4       	brne	.+2      	; 0x2d6 <main+0x1d6>
				{
					Time_STOP = 0;
					break;
				}
				ADCSRA |= 0x40;
 2d4:	65 c0       	rjmp	.+202    	; 0x3a0 <main+0x2a0>
				while((ADCSRA & 0x10) == 0x00);
 2d6:	36 9a       	sbi	0x06, 6	; 6
				AdData = ADC;
 2d8:	34 9b       	sbis	0x06, 4	; 6
 2da:	fe cf       	rjmp	.-4      	; 0x2d8 <main+0x1d8>
		//		sprintf(s," Cds: %d", AdData);
				putch_Str("\n\r CDS : ");
 2dc:	e4 b0       	in	r14, 0x04	; 4
 2de:	f5 b0       	in	r15, 0x05	; 5
				putch((AdData/1000)%10 + '0');
 2e0:	8a e1       	ldi	r24, 0x1A	; 26
 2e2:	91 e0       	ldi	r25, 0x01	; 1
 2e4:	fb de       	rcall	.-522    	; 0xdc <putch_Str>
 2e6:	c7 01       	movw	r24, r14
 2e8:	b5 01       	movw	r22, r10
 2ea:	af d0       	rcall	.+350    	; 0x44a <__udivmodhi4>
 2ec:	cb 01       	movw	r24, r22
 2ee:	b8 01       	movw	r22, r16
				putch((AdData/100)%10 + '0');
 2f0:	ac d0       	rcall	.+344    	; 0x44a <__udivmodhi4>
 2f2:	80 5d       	subi	r24, 0xD0	; 208
 2f4:	e9 de       	rcall	.-558    	; 0xc8 <putch>
 2f6:	c7 01       	movw	r24, r14
 2f8:	b4 01       	movw	r22, r8
 2fa:	a7 d0       	rcall	.+334    	; 0x44a <__udivmodhi4>
 2fc:	cb 01       	movw	r24, r22
 2fe:	b8 01       	movw	r22, r16
				putch((AdData/10)%10 + '0');
 300:	a4 d0       	rcall	.+328    	; 0x44a <__udivmodhi4>
 302:	80 5d       	subi	r24, 0xD0	; 208
 304:	e1 de       	rcall	.-574    	; 0xc8 <putch>
 306:	c7 01       	movw	r24, r14
 308:	b8 01       	movw	r22, r16
 30a:	9f d0       	rcall	.+318    	; 0x44a <__udivmodhi4>
 30c:	f8 2e       	mov	r15, r24
 30e:	cb 01       	movw	r24, r22
 310:	b8 01       	movw	r22, r16
 312:	9b d0       	rcall	.+310    	; 0x44a <__udivmodhi4>
 314:	80 5d       	subi	r24, 0xD0	; 208
 316:	d8 de       	rcall	.-592    	; 0xc8 <putch>
				putch((AdData)%10 + '0');
 318:	80 e3       	ldi	r24, 0x30	; 48
 31a:	8f 0d       	add	r24, r15
 31c:	d5 de       	rcall	.-598    	; 0xc8 <putch>
 31e:	2f ef       	ldi	r18, 0xFF	; 255
 320:	3f e3       	ldi	r19, 0x3F	; 63
 322:	4b e0       	ldi	r20, 0x0B	; 11
 324:	21 50       	subi	r18, 0x01	; 1
 326:	30 40       	sbci	r19, 0x00	; 0
 328:	40 40       	sbci	r20, 0x00	; 0
 32a:	e1 f7       	brne	.-8      	; 0x324 <main+0x224>
 32c:	00 c0       	rjmp	.+0      	; 0x32e <main+0x22e>
 32e:	00 00       	nop
 330:	cd cf       	rjmp	.-102    	; 0x2cc <main+0x1cc>
				_delay_ms(500);
			}
		}
		else if (RX_data == 'r') // 오른쪽
 332:	52 e7       	ldi	r21, 0x72	; 114
 334:	f5 12       	cpse	r15, r21
 336:	28 c0       	rjmp	.+80     	; 0x388 <main+0x288>
		{		
			putch_Str("\n\r right ");
 338:	84 e2       	ldi	r24, 0x24	; 36
 33a:	91 e0       	ldi	r25, 0x01	; 1
 33c:	cf de       	rcall	.-610    	; 0xdc <putch_Str>
 33e:	30 e3       	ldi	r19, 0x30	; 48
				if(Time_STOP == 1)
				{
					Time_STOP = 0;
					break;
				}
				PORTD = 0x30;
 340:	20 e9       	ldi	r18, 0x90	; 144
				_delay_ms(10);
				PORTD = 0x90;
 342:	90 ec       	ldi	r25, 0xC0	; 192
				_delay_ms(10);
				PORTD = 0xC0;
 344:	80 e6       	ldi	r24, 0x60	; 96
				_delay_ms(10);
				PORTD = 0x60;
 346:	40 91 c0 01 	lds	r20, 0x01C0	; 0x8001c0 <__data_end>
		}
		else if (RX_data == 'r') // 오른쪽
		{		
			putch_Str("\n\r right ");
			while(1){
				if(Time_STOP == 1)
 34a:	41 30       	cpi	r20, 0x01	; 1
 34c:	49 f1       	breq	.+82     	; 0x3a0 <main+0x2a0>
 34e:	32 bb       	out	0x12, r19	; 18
				{
					Time_STOP = 0;
					break;
				}
				PORTD = 0x30;
 350:	ef ef       	ldi	r30, 0xFF	; 255
 352:	f7 e4       	ldi	r31, 0x47	; 71
 354:	31 97       	sbiw	r30, 0x01	; 1
 356:	f1 f7       	brne	.-4      	; 0x354 <main+0x254>
 358:	00 c0       	rjmp	.+0      	; 0x35a <main+0x25a>
 35a:	00 00       	nop
 35c:	22 bb       	out	0x12, r18	; 18
				_delay_ms(10);
				PORTD = 0x90;
 35e:	ef ef       	ldi	r30, 0xFF	; 255
 360:	f7 e4       	ldi	r31, 0x47	; 71
 362:	31 97       	sbiw	r30, 0x01	; 1
 364:	f1 f7       	brne	.-4      	; 0x362 <main+0x262>
 366:	00 c0       	rjmp	.+0      	; 0x368 <main+0x268>
 368:	00 00       	nop
 36a:	92 bb       	out	0x12, r25	; 18
 36c:	ef ef       	ldi	r30, 0xFF	; 255
 36e:	f7 e4       	ldi	r31, 0x47	; 71
 370:	31 97       	sbiw	r30, 0x01	; 1
 372:	f1 f7       	brne	.-4      	; 0x370 <main+0x270>
 374:	00 c0       	rjmp	.+0      	; 0x376 <main+0x276>
 376:	00 00       	nop
				_delay_ms(10);
				PORTD = 0xC0;
				_delay_ms(10);
				PORTD = 0x60;
 378:	82 bb       	out	0x12, r24	; 18
 37a:	ef ef       	ldi	r30, 0xFF	; 255
 37c:	f7 e4       	ldi	r31, 0x47	; 71
 37e:	31 97       	sbiw	r30, 0x01	; 1
 380:	f1 f7       	brne	.-4      	; 0x37e <main+0x27e>
 382:	00 c0       	rjmp	.+0      	; 0x384 <main+0x284>
 384:	00 00       	nop
 386:	df cf       	rjmp	.-66     	; 0x346 <main+0x246>
				_delay_ms(10);
			}
		}
		else if (RX_data == 'l') // 왼쪽
 388:	fc e6       	ldi	r31, 0x6C	; 108
 38a:	ff 12       	cpse	r15, r31
 38c:	2e cf       	rjmp	.-420    	; 0x1ea <main+0xea>
		{
			putch_Str("\n\r left ");
 38e:	8e e2       	ldi	r24, 0x2E	; 46
 390:	91 e0       	ldi	r25, 0x01	; 1
 392:	a4 de       	rcall	.-696    	; 0xdc <putch_Str>
 394:	90 e4       	ldi	r25, 0x40	; 64
				}
				PORTD = 0x10;
				_delay_ms(10);
				PORTD = 0x20;
				_delay_ms(10);
				PORTD = 0x40;
 396:	80 e8       	ldi	r24, 0x80	; 128
				_delay_ms(10);
				PORTD = 0x80; 
 398:	20 91 c0 01 	lds	r18, 0x01C0	; 0x8001c0 <__data_end>
		}
		else if (RX_data == 'l') // 왼쪽
		{
			putch_Str("\n\r left ");
			while(1){
				if(Time_STOP == 1)
 39c:	21 30       	cpi	r18, 0x01	; 1
 39e:	19 f4       	brne	.+6      	; 0x3a6 <main+0x2a6>
 3a0:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <__data_end>
				{
					Time_STOP = 0;
 3a4:	22 cf       	rjmp	.-444    	; 0x1ea <main+0xea>
					break;
 3a6:	c2 ba       	out	0x12, r12	; 18
				}
				PORTD = 0x10;
 3a8:	ef ef       	ldi	r30, 0xFF	; 255
 3aa:	f7 e4       	ldi	r31, 0x47	; 71
 3ac:	31 97       	sbiw	r30, 0x01	; 1
 3ae:	f1 f7       	brne	.-4      	; 0x3ac <main+0x2ac>
 3b0:	00 c0       	rjmp	.+0      	; 0x3b2 <main+0x2b2>
 3b2:	00 00       	nop
 3b4:	d2 ba       	out	0x12, r13	; 18
				_delay_ms(10);
				PORTD = 0x20;
 3b6:	ef ef       	ldi	r30, 0xFF	; 255
 3b8:	f7 e4       	ldi	r31, 0x47	; 71
 3ba:	31 97       	sbiw	r30, 0x01	; 1
 3bc:	f1 f7       	brne	.-4      	; 0x3ba <main+0x2ba>
 3be:	00 c0       	rjmp	.+0      	; 0x3c0 <main+0x2c0>
 3c0:	00 00       	nop
 3c2:	92 bb       	out	0x12, r25	; 18
				_delay_ms(10);
				PORTD = 0x40;
 3c4:	ef ef       	ldi	r30, 0xFF	; 255
 3c6:	f7 e4       	ldi	r31, 0x47	; 71
 3c8:	31 97       	sbiw	r30, 0x01	; 1
 3ca:	f1 f7       	brne	.-4      	; 0x3c8 <main+0x2c8>
 3cc:	00 c0       	rjmp	.+0      	; 0x3ce <main+0x2ce>
 3ce:	00 00       	nop
 3d0:	82 bb       	out	0x12, r24	; 18
				_delay_ms(10);
				PORTD = 0x80; 
 3d2:	ef ef       	ldi	r30, 0xFF	; 255
 3d4:	f7 e4       	ldi	r31, 0x47	; 71
 3d6:	31 97       	sbiw	r30, 0x01	; 1
 3d8:	f1 f7       	brne	.-4      	; 0x3d6 <main+0x2d6>
 3da:	00 c0       	rjmp	.+0      	; 0x3dc <main+0x2dc>
 3dc:	00 00       	nop
 3de:	dc cf       	rjmp	.-72     	; 0x398 <main+0x298>

000003e0 <__vector_1>:
 3e0:	1f 92       	push	r1
		}
	}
}

SIGNAL(INT0_vect)
{
 3e2:	0f 92       	push	r0
 3e4:	0f b6       	in	r0, 0x3f	; 63
 3e6:	0f 92       	push	r0
 3e8:	11 24       	eor	r1, r1
 3ea:	0b b6       	in	r0, 0x3b	; 59
 3ec:	0f 92       	push	r0
 3ee:	2f 93       	push	r18
 3f0:	3f 93       	push	r19
 3f2:	4f 93       	push	r20
 3f4:	5f 93       	push	r21
 3f6:	6f 93       	push	r22
 3f8:	7f 93       	push	r23
 3fa:	8f 93       	push	r24
 3fc:	9f 93       	push	r25
 3fe:	af 93       	push	r26
 400:	bf 93       	push	r27
 402:	ef 93       	push	r30
 404:	ff 93       	push	r31
	cli();
 406:	f8 94       	cli
	if(Time_STOP == 0)
 408:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <__data_end>
 40c:	81 11       	cpse	r24, r1
 40e:	07 c0       	rjmp	.+14     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
	{
		Time_STOP = 1;
 410:	81 e0       	ldi	r24, 0x01	; 1
 412:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <__data_end>
		putch_Str("\n\r Stop ");
 416:	87 eb       	ldi	r24, 0xB7	; 183
 418:	91 e0       	ldi	r25, 0x01	; 1
 41a:	60 de       	rcall	.-832    	; 0xdc <putch_Str>
 41c:	02 c0       	rjmp	.+4      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
	}
	else
	{
		Time_STOP = 0;
 41e:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <__data_end>
	}
	sei();
 422:	78 94       	sei
}
 424:	ff 91       	pop	r31
 426:	ef 91       	pop	r30
 428:	bf 91       	pop	r27
 42a:	af 91       	pop	r26
 42c:	9f 91       	pop	r25
 42e:	8f 91       	pop	r24
 430:	7f 91       	pop	r23
 432:	6f 91       	pop	r22
 434:	5f 91       	pop	r21
 436:	4f 91       	pop	r20
 438:	3f 91       	pop	r19
 43a:	2f 91       	pop	r18
 43c:	0f 90       	pop	r0
 43e:	0b be       	out	0x3b, r0	; 59
 440:	0f 90       	pop	r0
 442:	0f be       	out	0x3f, r0	; 63
 444:	0f 90       	pop	r0
 446:	1f 90       	pop	r1
 448:	18 95       	reti

0000044a <__udivmodhi4>:
 44a:	aa 1b       	sub	r26, r26
 44c:	bb 1b       	sub	r27, r27
 44e:	51 e1       	ldi	r21, 0x11	; 17
 450:	07 c0       	rjmp	.+14     	; 0x460 <__udivmodhi4_ep>

00000452 <__udivmodhi4_loop>:
 452:	aa 1f       	adc	r26, r26
 454:	bb 1f       	adc	r27, r27
 456:	a6 17       	cp	r26, r22
 458:	b7 07       	cpc	r27, r23
 45a:	10 f0       	brcs	.+4      	; 0x460 <__udivmodhi4_ep>
 45c:	a6 1b       	sub	r26, r22
 45e:	b7 0b       	sbc	r27, r23

00000460 <__udivmodhi4_ep>:
 460:	88 1f       	adc	r24, r24
 462:	99 1f       	adc	r25, r25
 464:	5a 95       	dec	r21
 466:	a9 f7       	brne	.-22     	; 0x452 <__udivmodhi4_loop>
 468:	80 95       	com	r24
 46a:	90 95       	com	r25
 46c:	bc 01       	movw	r22, r24
 46e:	cd 01       	movw	r24, r26
 470:	08 95       	ret

00000472 <__divmodsi4>:
 472:	05 2e       	mov	r0, r21
 474:	97 fb       	bst	r25, 7
 476:	16 f4       	brtc	.+4      	; 0x47c <__divmodsi4+0xa>
 478:	00 94       	com	r0
 47a:	0f d0       	rcall	.+30     	; 0x49a <__negsi2>
 47c:	57 fd       	sbrc	r21, 7
 47e:	05 d0       	rcall	.+10     	; 0x48a <__divmodsi4_neg2>
 480:	14 d0       	rcall	.+40     	; 0x4aa <__udivmodsi4>
 482:	07 fc       	sbrc	r0, 7
 484:	02 d0       	rcall	.+4      	; 0x48a <__divmodsi4_neg2>
 486:	46 f4       	brtc	.+16     	; 0x498 <__divmodsi4_exit>
 488:	08 c0       	rjmp	.+16     	; 0x49a <__negsi2>

0000048a <__divmodsi4_neg2>:
 48a:	50 95       	com	r21
 48c:	40 95       	com	r20
 48e:	30 95       	com	r19
 490:	21 95       	neg	r18
 492:	3f 4f       	sbci	r19, 0xFF	; 255
 494:	4f 4f       	sbci	r20, 0xFF	; 255
 496:	5f 4f       	sbci	r21, 0xFF	; 255

00000498 <__divmodsi4_exit>:
 498:	08 95       	ret

0000049a <__negsi2>:
 49a:	90 95       	com	r25
 49c:	80 95       	com	r24
 49e:	70 95       	com	r23
 4a0:	61 95       	neg	r22
 4a2:	7f 4f       	sbci	r23, 0xFF	; 255
 4a4:	8f 4f       	sbci	r24, 0xFF	; 255
 4a6:	9f 4f       	sbci	r25, 0xFF	; 255
 4a8:	08 95       	ret

000004aa <__udivmodsi4>:
 4aa:	a1 e2       	ldi	r26, 0x21	; 33
 4ac:	1a 2e       	mov	r1, r26
 4ae:	aa 1b       	sub	r26, r26
 4b0:	bb 1b       	sub	r27, r27
 4b2:	fd 01       	movw	r30, r26
 4b4:	0d c0       	rjmp	.+26     	; 0x4d0 <__udivmodsi4_ep>

000004b6 <__udivmodsi4_loop>:
 4b6:	aa 1f       	adc	r26, r26
 4b8:	bb 1f       	adc	r27, r27
 4ba:	ee 1f       	adc	r30, r30
 4bc:	ff 1f       	adc	r31, r31
 4be:	a2 17       	cp	r26, r18
 4c0:	b3 07       	cpc	r27, r19
 4c2:	e4 07       	cpc	r30, r20
 4c4:	f5 07       	cpc	r31, r21
 4c6:	20 f0       	brcs	.+8      	; 0x4d0 <__udivmodsi4_ep>
 4c8:	a2 1b       	sub	r26, r18
 4ca:	b3 0b       	sbc	r27, r19
 4cc:	e4 0b       	sbc	r30, r20
 4ce:	f5 0b       	sbc	r31, r21

000004d0 <__udivmodsi4_ep>:
 4d0:	66 1f       	adc	r22, r22
 4d2:	77 1f       	adc	r23, r23
 4d4:	88 1f       	adc	r24, r24
 4d6:	99 1f       	adc	r25, r25
 4d8:	1a 94       	dec	r1
 4da:	69 f7       	brne	.-38     	; 0x4b6 <__udivmodsi4_loop>
 4dc:	60 95       	com	r22
 4de:	70 95       	com	r23
 4e0:	80 95       	com	r24
 4e2:	90 95       	com	r25
 4e4:	9b 01       	movw	r18, r22
 4e6:	ac 01       	movw	r20, r24
 4e8:	bd 01       	movw	r22, r26
 4ea:	cf 01       	movw	r24, r30
 4ec:	08 95       	ret

000004ee <_exit>:
 4ee:	f8 94       	cli

000004f0 <__stop_program>:
 4f0:	ff cf       	rjmp	.-2      	; 0x4f0 <__stop_program>
